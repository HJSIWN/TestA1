repeat wait(0.1) until game.Players and game.Players.LocalPlayer and game.Players.LocalPlayer.Character

local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/MQPS7/SOMTANK-UI-OpenSrc/refs/heads/main/V1"))()

HttpService = game:GetService("HttpService")
PathfindingService = game:GetService("PathfindingService")
TweenService = game:GetService("TweenService")
RunService = game:GetService("RunService")
Lighting = game:GetService("Lighting")
replicatedStorage = game:GetService("ReplicatedStorage")
UIS = game:GetService("UserInputService")
UIS = game:GetService("UserInputService")
GuiService = game:GetService("GuiService")

player = game.Players.LocalPlayer
character = player.Character
humanoid = character:FindFirstChildOfClass("Humanoid")
HMNRT = character:FindFirstChild("HumanoidRootPart")
Camera = workspace.CurrentCamera
screenSize = Camera.ViewportSize
plrGui = player.PlayerGui

Send = replicatedStorage:WaitForChild("Remotes"):WaitForChild("Send")
webhookUrl = "https://discord.com/api/webhooks/1378634865796317326/jzRjm7lmUsT5w79Py1ryr2AxQ8UNIf6pbu07h-mR9_n8R4-kmvEIQ_pytguKSYdCQQ7F"

DoorFolder  = Instance.new("Folder", replicatedStorage)
ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
UiIs_Close = false

local function MakeDraggableButton(button: ImageButton, MoveFrame)
	local dragging = false;	local dragStart
	local startPos;	local firstPos
	button.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			Icon_Position = button.Position
			startPos = MoveFrame.Position
			if not firstPos then
				firstPos = MoveFrame.Position
			end
		end
	end)
	UIS.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
			local delta = input.Position - dragStart
			MoveFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
	UIS.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)
end
local function MakeImageButton(Parent, Size, Posi, BGtran, Color, Imtran, imageID)
	local NewFrame = Instance.new("ImageButton", Parent)
	local UICorner = Instance.new("UICorner", NewFrame)
	NewFrame.Position = Posi
	NewFrame.Size = Size
	NewFrame.BackgroundTransparency = BGtran
	NewFrame.Image = imageID or ""
	NewFrame.ImageTransparency = Imtran
	NewFrame.BackgroundColor3 = Color
	NewFrame.ImageColor3 = Color
	NewFrame.ZIndex = 2
	return NewFrame
end
local MoveIcon = MakeImageButton(ScreenGui, UDim2.new(0, 53,0, 51), UDim2.new(0.100, 0,0.447, 0), 1, Color3.new(1, 1, 1), 0, "rbxassetid://81129676934693")
local FOR_MoveIcon = Instance.new("UIAspectRatioConstraint", MoveIcon)
MakeDraggableButton(MoveIcon, MoveIcon)

--- EXAMPLE !!!

function gradient(text, startColor, endColor)
	local result = ""
	local length = #text

	for i = 1, length do
		local t = (i - 1) / math.max(length - 1, 1)
		local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
		local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
		local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

		local char = text:sub(i, i)
		result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
	end

	return result
end

local Window = WindUI:CreateWindow({
	Title = "Somtank",
	Icon = "rbxassetid://80019916158199",
	IconThemed = true,
	Author = "v0.0.1",
	Folder = "Somtank",
	Size = UDim2.fromOffset(460, 320),
	Transparent = true,
	Theme = "Violet",
	User = {
		Enabled = true,
		Callback = function() end,
		Anonymous = false
	},
	SideBarWidth = 200,
	ScrollBarEnabled = true,
})

OpenMainFrame = false
MoveIcon.Activated:Connect(function()
	if Icon_Position == MoveIcon.Position then
		OpenMainFrame = not OpenMainFrame
		if OpenMainFrame == false then
			Window:Open()
		else
			Window:Close()
		end
	end
end)

getgenv().TranslateEnv = "Thai"

SomtankInfo = Instance.new("Folder", replicatedStorage)
SomtankInfo.Name = "SomtankInfo"
SomtankInfo_Puddles = Instance.new("Folder", SomtankInfo)
SomtankInfo_Puddles.Name = "SomtankInfo_Puddles"

VehicleBlockers = nil--Map:WaitForChild("VehicleBlockers")

if getgenv().STVehicleBlockers then
	VehicleBlockers = getgenv().STVehicleBlockers
else
	VehicleBlockers = workspace:WaitForChild("Map"):WaitForChild("VehicleBlockers")
	getgenv().STVehicleBlockers = VehicleBlockers
end

if getgenv().SomtankInfoFolder then
	SomtankInfo = getgenv().SomtankInfoFolder
	SomtankInfo_Puddles = getgenv().SomtankInfo_Puddles_Folder
else
	getgenv().SomtankInfoFolder = SomtankInfo
	getgenv().SomtankInfo_Puddles_Folder = SomtankInfo_Puddles
end

if getgenv().MainButton677 then
	getgenv().MainButton677:Destroy()
	getgenv().MainButton677 = ScreenGui
else
	getgenv().MainButton677 = ScreenGui
end

local function Translate(ThaiLang, EngLang)
	local Resut = ThaiLang
	if getgenv().TranslateEnv then
		if getgenv().TranslateEnv == "Thai" then
			Resut = ThaiLang
		elseif getgenv().TranslateEnv == "Eng" then
			Resut = EngLang
		end
	end
	return Resut
end

Window:EditOpenButton({
	Title = "Open Example UI",
	Icon = "monitor",
	CornerRadius = UDim.new(0,16),
	StrokeThickness = 2,
	Color = ColorSequence.new(Color3.fromHex("FF0F7B"),Color3.fromHex("F89B29")),
	Enabled = false,
	Draggable = true,
})

local Tabs = {}

do
	Tabs.Player = Window:Section({
		Title = "กลุ่ม 1",
		Opened = true,
	})
	
	Tabs.Mode1 = Tabs.Player:Tab({ Title = "ผู้เล่น", Icon = "rbxassetid://2795572800" })
	
	Tabs.Mode2 = Tabs.Player:Tab({ Title = "ฟาร์ม", Icon = "rbxassetid://9008236330" })
	
end

Window:SelectTab(1)

local function tweenPart(fromPart, toPart, time, easingStyle, offset)
	local targetCFrame = toPart.CFrame
	if offset then
		targetCFrame = (toPart.CFrame * CFrame.new(offset.X, offset.Y, offset.Z))
	end
	local tweenInfo = TweenInfo.new(time,Enum.EasingStyle[easingStyle],Enum.EasingDirection.Out)
	local tween = TweenService:Create(fromPart, tweenInfo, {CFrame = targetCFrame})
	tween:Play()
end

local function IsNear(pos1, pos2, maxDist)
	return (pos1 - pos2).Magnitude <= maxDist
end

local function RemoveNotifications()
	for _, child in pairs(plrGui:WaitForChild("Notifications"):WaitForChild("Frame"):GetChildren()) do
		if child:IsA("TextLabel") and child.Visible == true then
			child:Destroy()
		end
	end
end

local function createPath(startPos, endPos)
	local path = PathfindingService:CreatePath({
		AgentRadius = 1.5,
		AgentHeight = 5,
		AgentCanJump = true
	})

	local success = pcall(function()
		path:ComputeAsync(startPos, endPos)
	end)

	if success and path.Status == Enum.PathStatus.Success then
		return path:GetWaypoints()
	end
	return nil
end

local function getRandomPosition(centerPos, range)
	local angle = math.random() * math.pi * 2
	local distance = math.random(1, range or 5)
	return Vector3.new(
		centerPos.X + math.cos(angle) * distance,
		centerPos.Y,
		centerPos.Z + math.sin(angle) * distance
	)
end

local function isSafePosition(position)
	local rayOrigin = position + Vector3.new(0, 5, 0)
	local rayDirection = Vector3.new(0, -10, 0)

	local raycastParams = RaycastParams.new()
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	raycastParams.FilterDescendantsInstances = {character}

	local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

	if result and result.Material ~= Enum.Material.Water then
		return true
	end

	return false
end

local NotificationS = plrGui:WaitForChild("Notifications"):WaitForChild("Frame")
local UsePathFinding = false
local UserHurt = false
local function smartWarpTo(targetPosition)

	UsePathFinding = true
	
	character = player.Character
	humanoid = character:FindFirstChildOfClass("Humanoid")
	HMNRT = character:FindFirstChild("HumanoidRootPart")
	
	pcall(function()
		CounterTable = nil
		for _, obj in ipairs(getgc(true)) do
			if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
				CounterTable = obj
				break
			end
		end
		CounterTable.event += 1
		Send:FireServer(CounterTable.event,"set_sprinting_1",true)
	end)
	
	local function splitWaypoint(startPos, endPos, maxDistance)
		local direction = (endPos - startPos)
		local distance = direction.Magnitude

		if distance <= maxDistance then
			return {endPos}
		end

		local steps = math.ceil(distance / maxDistance)
		local stepVector = direction / steps
		local positions = {}

		for i = 1, steps do
			if UsePathFinding == false then break end
			if UserHurt == true then break end
			local pos = startPos + (stepVector * i)
			table.insert(positions, pos)
		end

		return positions
	end
	
	local function warpPath(waypoints)
		local waypointsbackup = waypoints
		local currentPos = HMNRT.Position

		for i, waypoint in ipairs(waypoints) do
			if UsePathFinding == false then break end
			if UserHurt == true then break end
			if #NotificationS:GetChildren() < 5 then
				
				local targetPos = waypoint.Position
				local isJumpPoint = waypoint.Action == Enum.PathWaypointAction.Jump

				-- แบ่งเส้นทางเป็นระยะสั้นๆ (3-5 studs)
				local shortSteps = splitWaypoint(currentPos, targetPos, 3)
								
				for j, stepPos in ipairs(shortSteps) do
					if UsePathFinding == false then break end
					if UserHurt == true then break end
					
					-- ถ้าเป็นจุดกระโดด ให้วาร์ปสูงขึ้นก่อน
					if isJumpPoint and j == 1 then
						-- จำลองการกระโดด - วาร์ปขึ้นไปก่อน
						local jumpHeight = 14
						local jumpPos = Vector3.new(currentPos.X, currentPos.Y + jumpHeight, currentPos.Z)
						HMNRT.CFrame = CFrame.new(jumpPos)
						wait(0.1)

						-- ทำให้ humanoid คิดว่ากำลังกระโดด
						humanoid.Jump = true
					end

					-- ปรับความสูงให้เหมาะสม
					local safeHeight = stepPos.Y
					if isJumpPoint then
						safeHeight = math.max(stepPos.Y, currentPos.Y) + math.random(1, 3)
					else
						safeHeight = stepPos.Y + 2
					end

					local safePos = Vector3.new(stepPos.X, safeHeight, stepPos.Z)

					-- ตรวจสอบความปลอดภัย
					if not isSafePosition(safePos) then
						-- หาตำแหน่งปลอดภัยใกล้เคียง
						for attempt = 1, 3 do
							local offset = Vector3.new(
								math.random(-2, 2),
								2,
								math.random(-2, 2)
							)
							local testPos = safePos + offset
							if isSafePosition(testPos) then
								safePos = testPos
								break
							end
						end
					end
					
					if humanoid.Sit == true then
						humanoid.Jump = true
					end

					-- วาร์ปไปตำแหน่งใหม่
					HMNRT.CFrame = CFrame.new(safePos)
					currentPos = safePos

					wait(0.07)
					
					-- ถ้าเป็นจุดกระโดดและเป็น step สุดท้าย ให้ลงมาเล็กน้อย
					if isJumpPoint and j == #shortSteps then
						wait(0.1)
						local landPos = Vector3.new(safePos.X, targetPos.Y + 1, safePos.Z)
						if isSafePosition(landPos) then
							HMNRT.CFrame = CFrame.new(landPos)
							currentPos = landPos
						end
					end
				end
				
			end
			
		end

		-- ตรวจสอบว่าถึงเป้าหมายแล้วหรือไม่
		local finalDistance = (HMNRT.Position - targetPosition).Magnitude
		return finalDistance <= 3
	end

	-- ลองวาร์ป
	local function attemptWarp(destination)
		local waypoints = createPath(HMNRT.Position, destination)
		if waypoints then
			return warpPath(waypoints)
		end
		return false
	end

	--print("Warping to: " .. tostring(targetPosition))

	-- ลองวาร์ปไปเป้าหมายโดยตรง
	local success = attemptWarp(targetPosition)

	-- ถ้าไม่สำเร็จ ลองอีก 3 ครั้ง
	local attempts = 0
	while not success and not IsNear(HMNRT.Position, targetPosition, 5) do
		wait(0.12)
		if UsePathFinding == false then break end
		if UserHurt == true then break end
		if #NotificationS:GetChildren() > 5 then
			task.wait(1.5)
			humanoid.Jump = true
			task.wait(1.5)
			WindUI:Notify({
				Title = "Walk Path Reset",
				Content = "รีเซ็ทการเดิน "..attempts,
				Duration = 5,
			})
			break
		end
		
		
		attempts = attempts + 1
		print("Retry " .. attempts)

		-- วาร์ปไปตำแหน่งสุ่มก่อน
		local randomPos = getRandomPosition(targetPosition, 5)
		local reachedRandom = attemptWarp(randomPos)

		if reachedRandom then
			wait(0.5)
			-- ลองวาร์ปไปเป้าหมายอีกครั้ง
			success = attemptWarp(targetPosition)
		else
			-- เลื่อนตัวทีละนิด
			local currentPos = HMNRT.Position
			local escapeSteps = splitWaypoint(currentPos, currentPos + Vector3.new(
				math.random(-6, 6),
				2,
				math.random(-6, 6)
				), 3)

			for _, escapePos in ipairs(escapeSteps) do
				if UsePathFinding == false then break end
				if UserHurt == true then break end
				HMNRT.CFrame = CFrame.new(escapePos)
				wait(0.12)
			end
		end
	end
	
	pcall(function()
		CounterTable = nil
		for _, obj in ipairs(getgc(true)) do
			if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
				CounterTable = obj
				break
			end
		end
		CounterTable.event += 1
		Send:FireServer(CounterTable.event,"set_sprinting_1",false)
	end)

	return success
end

local function matchesAllowedKeyword(value, allowedKeywords)
	value = value:lower()
	for _, keyword in ipairs(allowedKeywords) do
		if string.find(value, keyword:lower()) then
			return true
		end
	end
	return false
end

local totalCash = 0
local function sendMoneyToDiscord(player, money)
	pcall(function()
		totalCash = totalCash + tostring(money)
		local data = {
			username = "Roblox Money Bot",
			embeds = {{
				title = "📢 อัปเดตค่าเงินผู้เล่น",
				description = " "..player.Name.."** มีเงินตอนนี้ : " .. totalCash .. " 💰",
				color = 65280
			}}
		}
		local jsonData = HttpService:JSONEncode(data)
		HttpService:PostAsync(webhookUrl, jsonData, Enum.HttpContentType.ApplicationJson)
	end)
end

local ConsumableOptionsHolder = plrGui:WaitForChild("ConsumableBuy"):WaitForChild("ConsumableOptionsHolder")
local CategoriesFrame = ConsumableOptionsHolder:WaitForChild("CategoriesFrame")
local ConsumableOptionsScrollingFrame = ConsumableOptionsHolder:WaitForChild("ConsumableOptionsScrollingFrame")
local function BuyHardwareStore(ItemName)
	local MainFrame, Resut = nil, "none"
	if ItemName then
		for i,v in ipairs(ConsumableOptionsScrollingFrame:GetChildren()) do
			if v:FindFirstChild("Item") and v:FindFirstChild("Item"):FindFirstChild("Options") and v:FindFirstChild("Item"):FindFirstChild("Options"):FindFirstChild("ConsumableName") then
				local ConsumableName = v:FindFirstChild("Item"):FindFirstChild("Options"):FindFirstChild("ConsumableName")
				if ConsumableName and MainFrame == nil and matchesAllowedKeyword(ConsumableName.Text, {ItemName}) then
					MainFrame = v
				else
					Resut = "Don't Have Item!"
				end
			end 
		end
		if MainFrame then
			local ConsumableBuyButton = MainFrame:WaitForChild("Item"):WaitForChild("Options"):WaitForChild("ConsumableBuyButton")
			if ConsumableBuyButton.Visible == true and ConsumableBuyButton:FindFirstChild("TextLabel") then
				local TextLabel = ConsumableBuyButton:FindFirstChild("TextLabel")
				if tonumber(TextLabel.ContentText:match("%d+")) and tonumber(TextLabel.ContentText:match("%d+")) <= PlayerMoney then
					firesignal(ConsumableBuyButton.MouseButton1Click)
					Resut = "You got "..ItemName.." !"
				else
					Resut = "You Don't have Money"
				end
			else
				Resut = " You can't buy this!"
			end
		end
	end
	return Resut
end
local function CanBuyHardwareStore(ItemName)
	local MainFrame, Resut = nil, false
	if ItemName then
		for i,v in ipairs(ConsumableOptionsScrollingFrame:GetChildren()) do
			if v:FindFirstChild("Item") and v:FindFirstChild("Item"):FindFirstChild("Options") and v:FindFirstChild("Item"):FindFirstChild("Options"):FindFirstChild("ConsumableName") then
				local ConsumableName = v:FindFirstChild("Item"):FindFirstChild("Options"):FindFirstChild("ConsumableName")
				if ConsumableName and MainFrame == nil and matchesAllowedKeyword(ConsumableName.Text, {ItemName}) then
					MainFrame = v
					break
				else
					Resut = false
				end
			end 
		end
		if MainFrame then
			local ConsumableBuyButton = MainFrame:WaitForChild("Item"):WaitForChild("Options"):WaitForChild("ConsumableBuyButton")
			if ConsumableBuyButton.Visible == true and ConsumableBuyButton:FindFirstChild("TextLabel") then
				local TextLabel = ConsumableBuyButton:FindFirstChild("TextLabel")
				if tonumber(TextLabel.ContentText:match("%d+")) and tonumber(TextLabel.ContentText:match("%d+")) <= PlayerMoney then
					Resut = true
				else
					Resut = false
				end
			else
				Resut = false
			end
		end
	end
	return Resut
end

local ItemsScrollingFrame = plrGui:WaitForChild("Items"):WaitForChild("ItemsHolder"):WaitForChild("ItemsScrollingFrame")
local ItemsCloseButton = plrGui:WaitForChild("Items"):WaitForChild("ItemsHolder"):WaitForChild("ItemsCloseButton")
local SidebarHolderSlider = plrGui:WaitForChild("Sidebar"):WaitForChild("SidebarSlider"):WaitForChild("SidebarHolder"):WaitForChild("SidebarHolderSlider")
local EquipItemButton = plrGui:WaitForChild("ItemInfoGui"):WaitForChild("ItemInfoHolder"):WaitForChild("PromptButtons"):WaitForChild("EquipItemButton")
local Items = plrGui:WaitForChild("Items")
local ItemsHolder = Items:WaitForChild("ItemsHolder")
local InventoryButton = nil
for i,v in ipairs(SidebarHolderSlider:GetChildren()) do
	if v:IsA("Frame") and v:FindFirstChild("InventoryButton") then
		InventoryButton = v:FindFirstChild("InventoryButton")
		break
	end
end
local function FindItem(ItemName)
	Items.Enabled = false
	firesignal(InventoryButton.MouseButton1Click)
	local button, Resut = nil, false
	wait(0.3)
	if ItemName then
		for i,v in ipairs(ItemsScrollingFrame:GetChildren()) do
			if v:IsA("ImageButton") and v.Visible == true and v:FindFirstChild("ItemName") then
				local ItemName_IT = v:FindFirstChild("ItemName")
				if Resut == false and matchesAllowedKeyword(ItemName_IT.Text, {ItemName}) then
					Resut = true
					button = v
					print("")
					warn("**** FindItem() **** Player Have "..ItemName)
					print("")
					break
				end
			end
		end
	end
	if ItemsHolder.Visible == true then
		repeat
			firesignal(InventoryButton.MouseButton1Click)
			wait(0.1)
		until ItemsHolder.Visible == true
	end
	Items.Enabled = true
	return Resut, button
end
local function EquipItemInInventory(ItemName)
	local Resut = "none"
	if ItemName then
		local Resut, Item = FindItem(ItemName)
		if Item then
			firesignal(Item.MouseButton1Click)
			wait(0.3)
			firesignal(EquipItemButton.MouseButton1Click)
			wait(0.3)
			firesignal(ItemsCloseButton.MouseButton1Click)
			Resut = "SetItemToHotBar"
			if character:FindFirstChildOfClass("Tool") then
				character:FindFirstChildOfClass("Tool").Parent = player.Backpack
			end
			if player.Backpack:FindFirstChild(ItemName) then
				player.Backpack:FindFirstChild(ItemName).Parent = character
				Resut = "Equipped"
			end
		end
	end
	return Resut
end

local CounterGetGC
Map = workspace:WaitForChild("Map")
Tiles = Map:WaitForChild("Tiles")

pcall(function()
	OldCFrame = HMNRT.CFrame
	ConsumableBuy = plrGui:WaitForChild("ConsumableBuy")
	ConsumableBuy.Enabled = false
	Camera.CameraType = Enum.CameraType.Scriptable
	HMNRT.CFrame = workspace.ShopZone_Hardware.CFrame
	wait(0.1)
	HMNRT.CFrame = OldCFrame
	Camera.CameraType = Enum.CameraType.Custom
	RemoveNotifications()
	ConsumableBuy.Enabled = true
end)

for i,v in ipairs(Map:WaitForChild("SafeZoneIndicators"):GetDescendants()) do
	if v:IsA("BasePart") then
		v.CanCollide = false
		v.CanTouch = false
	end
end

ItemsScrollingFrame = plrGui:WaitForChild("Items"):WaitForChild("ItemsHolder"):WaitForChild("ItemsScrollingFrame")


JobApplicationFrame = plrGui:WaitForChild("JobApplication"):WaitForChild("JobApplicationFrame")
ApplyJob_Button = JobApplicationFrame:WaitForChild("ApplyJob")
CancelJob_Button = JobApplicationFrame:WaitForChild("CancelJob")
Notifications = plrGui:WaitForChild("Notifications")
ProgressBarFrame = plrGui:WaitForChild("ProgressBar"):WaitForChild("ProgressBarFrame")
BarAmount = ProgressBarFrame:WaitForChild("MainFrame"):WaitForChild("BarAmount")
FinishBar = ProgressBarFrame:WaitForChild("InputFrame"):WaitForChild("FinishBar")



Quick11Beacon = Tiles:WaitForChild("GasStationTile"):WaitForChild("Quick11"):WaitForChild("Interior"):WaitForChild("Quick11Beacon")


JobBegin_BurgePlaceBeacon = workspace:WaitForChild("BurgePlaceBeacon"):WaitForChild("TouchPart")
JobBegin_Quick11Beacon = Quick11Beacon:WaitForChild("TouchPart")


SkillsScrollingFrame = plrGui:WaitForChild("Skills"):WaitForChild("SkillsHolder"):WaitForChild("SkillsScrollingFrame")
MoneyTextLabel = plrGui:WaitForChild("TopRightHud"):WaitForChild("Holder"):WaitForChild("Frame"):WaitForChild("MoneyTextLabel")
PlayerMoney = MoneyTextLabel.ContentText:match("%d+")
UserHealth = humanoid.Health



Section = Tabs.Mode1:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("🏃 การเคลื่อนไหว", "🏃 Movement"))

task.spawn(function()
	while true do
		wait(3)
		pcall(function()
			player = game.Players.LocalPlayer
			character = player.Character
			humanoid = character:FindFirstChildOfClass("Humanoid")
			HMNRT = character:FindFirstChild("HumanoidRootPart")
			Camera = workspace.CurrentCamera
			screenSize = Camera.ViewportSize
			plrGui = player.PlayerGui
		end)
	end
end)

Walkfaster = false
NewBodyPosition = nil
NewFakeCamPart = nil
NewModel = nil
WalkfasterSpeed = 1
Tabs.Mode1:Toggle({
	Title = Translate("เดินวาร์ป ( เดินเร็วขึ้น )", "Tp walk"),
	Value = false,
	Callback = function(state)
		Walkfaster = state
		if Walkfaster == true then
			local NewModelInstance = Instance.new("Model", workspace)
			local NewHumanoidInstance = Instance.new("Humanoid", NewModelInstance)
			local FakeCamPart = Instance.new("Part", NewModelInstance)
			local BodyPosition = Instance.new("BodyPosition", FakeCamPart)
			BodyPosition.D = 3
			BodyPosition.MaxForce = Vector3.new(40000,40000,40000)
			BodyPosition.P = 50
			BodyPosition.Position = HMNRT.Position + Vector3.new(0,0.5,0)
			FakeCamPart.CFrame = HMNRT.CFrame
			FakeCamPart.CanCollide = false
			FakeCamPart.Name = "HumanoidRootPart"
			FakeCamPart.Transparency = 1
			NewBodyPosition = BodyPosition
			NewFakeCamPart = FakeCamPart
			NewModel = NewModel
			Camera.CameraSubject = NewHumanoidInstance
		else
			Camera.CameraSubject = humanoid
			if NewBodyPosition then
				NewBodyPosition:Destroy()
			end
			if NewFakeCamPart then
				NewFakeCamPart:Destroy()
			end
			if NewModel then
				NewModel:Destroy()
			end
		end
	end
})
Tabs.Mode1:Slider({
	Title = Translate("ความเร็วการเดินวาร์ป", "Tp walk Speed"),
	Value = {
		Min = 0,
		Max = 2,
		Default = 1,
	},
	Step = 0.1,
	Callback = function(value)
		WalkfasterSpeed = tonumber(value)
	end
})
task.spawn(function()
	while true do
		if Walkfaster and NewBodyPosition and WalkfasterSpeed then
			repeat
				if humanoid.MoveDirection.Magnitude > 0 then
					local moveDirection = humanoid.MoveDirection.Unit
					HMNRT.CFrame = HMNRT.CFrame + (moveDirection * WalkfasterSpeed)
				end
				wait(0.11)
				NewBodyPosition.Position = HMNRT.Position + Vector3.new(0,0.5,0)
			until Walkfaster == false
		end
		task.wait(1)
	end
end)

PunchAura = false
Tabs.Mode1:Toggle({
	Title = Translate("👊 หมัดออร่า", "👊 Punch Aura"),
	Value = false,
	Callback = function(state)
		PunchAura = state
	end
})
task.spawn(function()
	local WhatTool = nil
	while true do
		if PunchAura then
			for i,v in ipairs(game.Players:GetChildren()) do
				if v ~= player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
					pcall(function()
						if ((v.Character.HumanoidRootPart.Position - HMNRT.Position).Magnitude) < 10 and PunchAura then
							WhatTool = nil
							if not character:FindFirstChild("Fists") then
								if character:FindFirstChildOfClass("Tool") then
									WhatTool = character:FindFirstChildOfClass("Tool")
									WhatTool.Parent = player.Backpack
								end
								if player.Backpack:FindFirstChild("Fists") then
									local Fist = player.Backpack:FindFirstChild("Fists")
									Fist.Parent = character
									CounterTable = nil
									for _, obj in ipairs(getgc(true)) do
										if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
											CounterTable = obj
											break
										end
									end
									CounterTable.event += 1
									Send:FireServer(CounterTable.event,"melee_attack",
										Fist,{v},CFrame.new(v.Character.HumanoidRootPart.Position),0.9)
									task.wait(0.2)
									Fist.Parent = player.Backpack
								end
							end
							if WhatTool then
								WhatTool.Parent = character
							end
						end
					end)
				end
			end
		end
		task.wait(0.7)
	end
end)

AntiAFK = false
Tabs.Mode1:Toggle({
	Title = Translate("ไม่โดนเตะ", "Anti AFK"),
	Value = false,
	Callback = function(state)
		AntiAFK = state
		if AntiAFK then
			antiAfkConnection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
				local vu = game:GetService("VirtualUser")
				vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
				task.wait(1)
				vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
			end)
		else
			if antiAfkConnection then
				antiAfkConnection:Disconnect()
				antiAfkConnection = nil
			end
		end
	end
})

Tabs.Mode1:Divider()

Tabs.Mode1:Button({
	Title = "BuyHardwareStore",
	Desc = "คลิกเพื่อเซ็ท",
	Callback = function()
		pcall(function()
			firesignal(InventoryButton.MouseButton1Click)
		end)
		WindUI:Notify({
			Title = "คุณได้เปิดฟังชั่น",
			Content = "ซื้อของ",
			Duration = 5,
		})
	end,
})

Tabs.Mode1:Button({
	Title = "EquipItemInInventory",
	Desc = "คลิกเพื่อเซ็ท",
	Callback = function()
		pcall(function()
			EquipItemInInventory("Bronze Mop")
		end)
		WindUI:Notify({
			Title = "คุณได้เปิดฟังชั่น",
			Content = "ซื้อของ",
			Duration = 5,
		})
	end,
})

local UserSkill_Janitor = 0
local UserSkill_Stamina = 0
local UserSkill_Shelf = 0
local UserSkill_Fishing = 0
local UserSkill_Farming = 0
local UserSkill_Cook = 0
local UserSkill_Swiper = 0

task.spawn(function()
	while true do
		PlayerMoney = tonumber(MoneyTextLabel.ContentText:match("%d+"))
		wait(1)
		for i,v in ipairs(SkillsScrollingFrame:GetChildren()) do
			if v:IsA("ImageButton") and v:FindFirstChild("SkillTitle") then
				local SkillTitle = v:FindFirstChild("SkillTitle")
				if matchesAllowedKeyword(SkillTitle.Text, {"Stamina"}) then
					UserSkill_Stamina = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Fishing"}) then
					UserSkill_Fishing = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Farming"}) then
					UserSkill_Farming = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Swiper"}) then
					UserSkill_Swiper = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Janitor"}) then
					UserSkill_Janitor = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Cook"}) then
					UserSkill_Cook = tonumber(SkillTitle.ContentText:match("%d+"))
				elseif matchesAllowedKeyword(SkillTitle.Text, {"Shelf Stocker"}) then
					UserSkill_Shelf = tonumber(SkillTitle.ContentText:match("%d+"))
				end
			end
		end
		if getgenv().ShowUserSkill and getgenv().ShowUserSkill == true then
			print("")
			print("************************************")
			print("****UserSkill_Janitor : "..UserSkill_Janitor or "nil")
			print("****UserSkill_Stamina : "..UserSkill_Stamina or "nil")
			print("****  UserSkill_Shelf : "..UserSkill_Shelf or "nil")
			print("****UserSkill_Farming : "..UserSkill_Farming or "nil")
			print("****   UserSkill_Cook : "..UserSkill_Cook or "nil")
			print("**** UserSkill_Swiper : "..UserSkill_Swiper or "nil")
			print("************************************")
			print("")	
		end
	end
end)

Section = Tabs.Mode2:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("⚙️ ตั้งค่า", "⚙️ Setting"))

Keeppeoplefromkilling = false
Tabs.Mode2:Toggle({
	Title = Translate("กันคนฆ่า", "Keep people from killing"),
	Value = false,
	Callback = function(state)
		Keeppeoplefromkilling = state
		if Keeppeoplefromkilling == false then
			UserHurt = false
		else
			humanoid.Health = humanoid.Health - 1
			wait(0.1)
			humanoid.Health = humanoid.MaxHealth
		end
	end
})
AutoReSpawn = false
Tabs.Mode2:Toggle({
	Title = Translate("😇 ออโต้เกิดใหม่", "😇 Auto Respawn"),
	Value = false,
	Callback = function(state)
		AutoReSpawn = state
	end
})
local Send = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Send")
task.spawn(function()
	local HealthBar = plrGui:WaitForChild("TopRightHud"):WaitForChild("Holder"):WaitForChild("HealthBar"):WaitForChild("Fill")
	local SafeCFrame, StuckSafeMode = nil, 0
	while true do
		wait(1)
		if Keeppeoplefromkilling and HealthBar then
			if HealthBar.Size.X.Scale < 0.7 then
				UserHurt = true
				Notifications.Enabled = false
				repeat
					StuckSafeMode = StuckSafeMode + 0.02
					if SafeCFrame then
						HMNRT.CFrame = SafeCFrame * CFrame.new(0,-10,0)
					end
					task.wait(0.02)
				until HealthBar.Size.X.Scale > 0.7 or Keeppeoplefromkilling == false or StuckSafeMode >= 50
				RemoveNotifications()
				if SafeCFrame then
					for i=1,10 do
						HMNRT.CFrame = SafeCFrame * CFrame.new(0,15,0)
						wait()
					end
				end
				Notifications.Enabled = true
				UserHurt = false
			else
				SafeCFrame = HMNRT.CFrame
			end
		end
		if AutoReSpawn and HealthBar.Size.X.Scale < 0.1 then
			local CounterTable
			for _, obj in ipairs(getgc(true)) do
				if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
					CounterTable = obj
					break
				end
			end
			CounterTable.event += 1
			Send:FireServer(CounterTable.event,"death_screen_request_respawn")
			task.wait(0.5)
			humanoid.Health = humanoid.Health - 1
			wait(0.1)
			humanoid.Health = humanoid.MaxHealth
		end
	end
end)

Change_Job_Tool_Level = false
Tabs.Mode2:Toggle({
	Title = Translate("🔄 เปลี่ยนอุปกรตามเลเวลงาน", "🔄 Change equipment according to job level"),
	Value = true,
	Callback = function(state) 
		Change_Job_Tool_Level = state
		if Change_Job_Tool_Level == true then
			WindUI:Notify({
				Title = "คุณได้เปิดฟังชั่น",
				Content = "เปลี่ยนอุปกรตามเลเวลงาน",
				Duration = 5,
			})
		else
			WindUI:Notify({
				Title = "คุณได้ปิดฟังชั่น",
				Content = "เปลี่ยนอุปกรตามเลเวลงาน",
				Duration = 5,
			})
		end
	end
})

Tabs.Mode2:Divider()

Section = Tabs.Mode2:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("💸 ออโต้ฝากเงิน", "💸 Auto deposit"))

Depositing = false
AutoDepositMoney = false
Tabs.Mode2:Toggle({
	Title = Translate("เริ่มทำงาน", "Start working"),
	Value = false,
	Callback = function(state)
		AutoDepositMoney = state
		if AutoDepositMoney == false then
			UsePathFinding = false
		end
	end
})

DepositMoneyWhen = 500
Tabs.Mode2:Slider({
	Title = Translate("จำนวนที่ต้องการฝาก", "Amount to be deposited"),
	Value = {
		Min = 50,
		Max = 10000,
		Default = 500,
	},
	Callback = function(value)
		DepositMoneyWhen = tonumber(value)
	end
})

local ATMs = workspace:WaitForChild("Map"):WaitForChild("Props"):WaitForChild("ATMs")
local ATMNear = nil
local HowNearATM = math.huge
local AreaPart = nil
local SurfaceGuiATM = nil
local function NearATM()
	ATMNear = nil
	HowNearATM = math.huge
	AreaPart = nil
	SurfaceGuiATM = nil
	for i,v in ipairs(ATMs:GetChildren()) do
		if v:FindFirstChild("Area") then
			local Area = v:FindFirstChild("Area")
			local Dis = (HMNRT.Position - Area.Position).Magnitude
			if Dis < HowNearATM then
				if v and Area then
					for i2,v2 in ipairs(v:GetDescendants()) do
						if v2.Name == "Screen" and v2:IsA("SurfaceGui") and v2:FindFirstChild("Text") then
							if v2.Enabled == false then
								HowNearATM = Dis
								ATMNear = v
								AreaPart = Area
								SurfaceGuiATM = v2
							end
						end
					end
				end
			end
		end
	end
	return HowNearATM, ATMNear, AreaPart, SurfaceGuiATM
end

local Get = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Get")
local function GotoNearATM()
	local GoFinish = false
	repeat
		local HowNearATM, ATMNear, AreaPart, SurfaceGuiATM = NearATM()
		if AreaPart and SurfaceGuiATM and GoFinish == false then
			local targetPosition = AreaPart.Position + Vector3.new(0,-4,0)
			UsePathFinding = true
			character = player.Character
			humanoid = character:FindFirstChildOfClass("Humanoid")
			HMNRT = character:FindFirstChild("HumanoidRootPart")
			pcall(function()
				CounterTable = nil
				for _, obj in ipairs(getgc(true)) do
					if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
						CounterTable = obj
						break
					end
				end
				CounterTable.event += 1
				Send:FireServer(CounterTable.event,"set_sprinting_1",true)
			end)
			local function splitWaypoint(startPos, endPos, maxDistance)
				local direction = (endPos - startPos)
				local distance = direction.Magnitude
				if distance <= maxDistance then
					return {endPos}
				end
				local steps = math.ceil(distance / maxDistance)
				local stepVector = direction / steps
				local positions = {}
				for i = 1, steps do
					if UsePathFinding == false then break end
					if UserHurt == true then break end
					local pos = startPos + (stepVector * i)
					table.insert(positions, pos)
				end
				return positions
			end
			local function warpPath(waypoints)
				local waypointsbackup = waypoints
				local currentPos = HMNRT.Position
				for i, waypoint in ipairs(waypoints) do
					if UsePathFinding == false then break end
					if UserHurt == true then break end
					if SurfaceGuiATM.Enabled == true then break end
					if #NotificationS:GetChildren() < 5 then
						local targetPos = waypoint.Position
						local isJumpPoint = waypoint.Action == Enum.PathWaypointAction.Jump
						local shortSteps = splitWaypoint(currentPos, targetPos, 3)
						for j, stepPos in ipairs(shortSteps) do
							if UsePathFinding == false then break end
							if UserHurt == true then break end
							if SurfaceGuiATM.Enabled == true then break end
							if isJumpPoint and j == 1 then
								local jumpHeight = 14
								local jumpPos = Vector3.new(currentPos.X, currentPos.Y + jumpHeight, currentPos.Z)
								HMNRT.CFrame = CFrame.new(jumpPos)
								wait(0.1)
								humanoid.Jump = true
							end
							local safeHeight = stepPos.Y
							if isJumpPoint then
								safeHeight = math.max(stepPos.Y, currentPos.Y) + math.random(1, 3)
							else
								safeHeight = stepPos.Y + 2
							end
							local safePos = Vector3.new(stepPos.X, safeHeight, stepPos.Z)
							if not isSafePosition(safePos) then
								for attempt = 1, 3 do
									local offset = Vector3.new(
										math.random(-2, 2),
										2,
										math.random(-2, 2)
									)
									local testPos = safePos + offset
									if isSafePosition(testPos) then
										safePos = testPos
										break
									end
								end
							end
							if humanoid.Sit == true then
								humanoid.Jump = true
							end
							HMNRT.CFrame = CFrame.new(safePos)
							currentPos = safePos
							wait(0.07)
							if isJumpPoint and j == #shortSteps then
								wait(0.1)
								local landPos = Vector3.new(safePos.X, targetPos.Y + 1, safePos.Z)
								if isSafePosition(landPos) then
									HMNRT.CFrame = CFrame.new(landPos)
									currentPos = landPos
								end
							end
						end
					end
				end
				local finalDistance = (HMNRT.Position - targetPosition).Magnitude
				return finalDistance <= 3
			end
			local function attemptWarp(destination)
				local waypoints = createPath(HMNRT.Position, destination)
				if waypoints then
					return warpPath(waypoints)
				end
				return false
			end
			local success = attemptWarp(targetPosition)
			local attempts = 0
			while not success and not IsNear(HMNRT.Position, targetPosition, 5) do
				wait(0.12)
				if UsePathFinding == false then break end
				if UserHurt == true then break end
				if SurfaceGuiATM.Enabled == true then break end
				if #NotificationS:GetChildren() > 5 then
					task.wait(1.5)
					humanoid.Jump = true
					task.wait(1.5)
					WindUI:Notify({
						Title = "Walk Path Reset",
						Content = "รีเซ็ทการเดิน "..attempts,
						Duration = 5,
					})
					break
				end
				attempts = attempts + 1
				local randomPos = getRandomPosition(targetPosition, 5)
				local reachedRandom = attemptWarp(randomPos)
				if reachedRandom then
					wait(0.5)
					success = attemptWarp(targetPosition)
				else
					local currentPos = HMNRT.Position
					local escapeSteps = splitWaypoint(currentPos, currentPos + Vector3.new(
						math.random(-6, 6),
						2,
						math.random(-6, 6)
						), 3)
					for _, escapePos in ipairs(escapeSteps) do
						if UsePathFinding == false then break end
						if UserHurt == true then break end
						if SurfaceGuiATM.Enabled == true then break end
						HMNRT.CFrame = CFrame.new(escapePos)
						wait(0.12)
					end
				end
			end
			pcall(function()
				CounterTable = nil
				for _, obj in ipairs(getgc(true)) do
					if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
						CounterTable = obj
						break
					end
				end
				CounterTable.event += 1
				Send:FireServer(CounterTable.event,"set_sprinting_1",false)
			end)
			if IsNear(HMNRT.Position, targetPosition, 5) then
				GoFinish = true
				repeat
					for _, obj in ipairs(getgc(true)) do
						if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
							CounterGetGC = obj
							break
						end
					end
					CounterGetGC.func += 1
					Get:InvokeServer(CounterGetGC.func, "transfer_funds", "hand", "bank", DepositMoneyWhen)
					if PlayerMoney < DepositMoneyWhen then
						WindUI:Notify({
							Title = "ฝากเงินสำเร็จ",
							Content = "คุณได้ทำการฝากเงิน",
							Duration = 5,
						})
						sendMoneyToDiscord(player.Name, DepositMoneyWhen)
					end
					task.wait(0.5)
				until PlayerMoney < DepositMoneyWhen or UserHurt == true
			end
		end
		task.wait(0.1)
	until GoFinish == true
end

task.spawn(function()
	while true do
		if AutoDepositMoney == true then
			if PlayerMoney >= DepositMoneyWhen then
				Depositing = true
				UsePathFinding = false
				task.wait(1)
				UsePathFinding = false
				repeat
					local GotoATM = GotoNearATM()
					task.wait(1)
				until PlayerMoney < DepositMoneyWhen or UserHurt == true
				Depositing = false
			end
		end
		task.wait(1)
	end
end)

Tabs.Mode2:Divider()

Section = Tabs.Mode2:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("🥩 ออโต้ทำงานร้านอาหาร", "🥩 Auto working restaurant"))

Cook_Farm = false
Tabs.Mode2:Toggle({
	Title = Translate("เริ่มทำงาน", "Start working"),
	Value = false,
	Callback = function(state) 
		Cook_Farm = state
		if Cook_Farm == true then
			WindUI:Notify({
				Title = "คุณได้เปิดฟังชั่น",
				Content = "ออโต้ทำงานร้านอาหาร",
				Duration = 5,
			})
			VehicleBlockers.Parent = DoorFolder
			for i,v in ipairs(workspace:GetDescendants()) do
				if v.Name == "DoorSystem" then
					v.Parent = DoorFolder
				end
			end
		else
			UsePathFinding = false
			WindUI:Notify({
				Title = "คุณได้ปิดฟังชั่น",
				Content = "ออโต้ทำงานร้านอาหาร",
				Duration = 5,
			})
			VehicleBlockers.Parent = Map
			for i,v in ipairs(DoorFolder:GetChildren()) do
				v.Parent = workspace
			end
			task.wait(1)
			UsePathFinding = false
		end
	end
})
task.spawn(function()
	local StuckCook, CanCheckTool = 0, true
	local Fridge = Map:WaitForChild("Tiles"):WaitForChild("ShoppingTile"):WaitForChild("SteakHouse"):WaitForChild("Interior"):WaitForChild("Fridge")
	local Area = Fridge:WaitForChild("Area")
	local SteakHouseBeacon = Map:WaitForChild("Tiles"):WaitForChild("ShoppingTile"):WaitForChild("SteakHouse"):WaitForChild("Interior"):WaitForChild("SteakHouseBeacon")
		
	for i,v in ipairs(Fridge:GetDescendants()) do
		if v.Name == "Base" and v:FindFirstChild("Attachment") and v:FindFirstChild("Attachment"):FindFirstChild("ProximityPrompt") then
			Fridge = v:FindFirstChild("Attachment"):FindFirstChild("ProximityPrompt")
			break
		end
	end
	
	local function EquiNewJobTool()
		if not Change_Job_Tool_Level then return end
		if UserSkill_Cook >= 10 and UserSkill_Cook < 25 then
			--print("***** Player Level > 10 ")
			local BronzeSkillet = FindItem("BronzeSkillet")
			if BronzeSkillet == false then
				--print("***** Player Don't have Bronze Skillet ")
				if CanBuyHardwareStore("Bronze Skillet") then
					--print("***** Player Can buy Bronze Skillet / Goto Shop! ")
					local smartWalkToJobBegin =	smartWarpTo(workspace.ShopZone_Hardware.Position + Vector3.new(0,-2,0))
					if IsNear(HMNRT.Position, workspace.ShopZone_Hardware.Position, 5) then
						BuyHardwareStore("Bronze Skillet")
					end
				end
			end
		elseif UserSkill_Cook >= 25 and UserSkill_Cook < 40 then
			--print("***** Player Level > 25 ")
			local SilverSkillet = FindItem("SilverSkillet")
			if SilverSkillet == false then
				--print("***** Player Don't have SilverSkillet ")
				if CanBuyHardwareStore("Silver Skillet") then
					--print("***** Player Can buy SilverSkillet / Goto buy")
					local smartWalkToJobBegin =	smartWarpTo(workspace.ShopZone_Hardware.Position + Vector3.new(0,-2,0))
					if IsNear(HMNRT.Position, workspace.ShopZone_Hardware.Position, 5) then
						BuyHardwareStore("Silver Skillet")
					end
				end
			end
		elseif UserSkill_Cook >= 40 then
			--print("***** Player Level > 40 ")
			local GoldenSkillet = FindItem("GoldenSkillet")
			if GoldenSkillet == false then
				--print("***** Player con't have GoldenSkillet ")
				if CanBuyHardwareStore("Golden Skillet") then
					--print("***** Player Can buy GoldenSkillet / Goto buy")
					local smartWalkToJobBegin =	smartWarpTo(workspace.ShopZone_Hardware.Position + Vector3.new(0,-2,0))
					if IsNear(HMNRT.Position, workspace.ShopZone_Hardware.Position, 5) then
						BuyHardwareStore("Golden Skillet")
					end
				end
			end
		end
	end

	while true do
		if Cook_Farm then
			EquiNewJobTool()
			
			if player:GetAttribute("Job") ~= "steakhouse_cook" then
				if Depositing == true or UserHurt == true then
					repeat
						task.wait(0.5)
					until Depositing == false and UserHurt == false
				end
				repeat
					local smartWalkToJobBegin =	smartWarpTo(SteakHouseBeacon.TouchPart.Position + Vector3.new(0,1,0))
					if IsNear(HMNRT.Position, SteakHouseBeacon.TouchPart.Position, 5) then
						if JobApplicationFrame.Visible == true then
							JobApplicationFrame.Visible = false
						end
						for _, obj in ipairs(getgc(true)) do
							if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
								CounterGetGC = obj
								break
							end
						end
						CounterGetGC.event += 1
						Send:FireServer(CounterGetGC.event,"apply_for_job",SteakHouseBeacon)
					end
					wait(0.1)
				until player:GetAttribute("Job") == "steakhouse_cook" or Stock_Farm == false or Depositing == true or UserHurt == true
				WindUI:Notify({
					Title = "สมัครงานร้านอาหาร",
					Content = "สำเร็จ",
					Duration = 5,
				})
			else
				
				repeat
					if CanCheckTool == false then
						EquiNewJobTool()
						CanCheckTool = true
					end
					if JobApplicationFrame.Visible == true then
						JobApplicationFrame.Visible = false
					end
					if Depositing == true or UserHurt == true then
						repeat
							task.wait(0.5)
						until Depositing == false and UserHurt == false
					end
					
					local smartWalkToJobBegin =	smartWarpTo(Area.Position + Vector3.new(0,-4,2))
					if IsNear(HMNRT.Position, Area.Position, 5) and Fridge then
						fireproximityprompt(Fridge)
					end
					
					if not character:FindFirstChildOfClass("Tool") then
						if player.Backpack:FindFirstChild("Steak") then
							local BoxTool = player.Backpack:FindFirstChild("Steak")
							BoxTool.Parent = character
						end
					end
					
					if character:FindFirstChildOfClass("Tool") and player:GetAttribute("Job") == "steakhouse_cook" then
						repeat

							StuckCook = 0
							repeat
								StuckCook = StuckCook + 0.3
								task.wait(0.3)
							until workspace:FindFirstChild("Beacon") and workspace:FindFirstChild("Beacon"):FindFirstChild("Base") 
								or player:GetAttribute("Job") ~= "steakhouse_cook" 
								or Depositing == true or UserHurt == true or StuckCook >= 3

							if player:GetAttribute("Job") == "steakhouse_cook" and workspace:FindFirstChild("Beacon") and workspace:FindFirstChild("Beacon"):FindFirstChild("Base") then
								local Beacon = workspace:FindFirstChild("Beacon"):FindFirstChild("Base")
								local smartWalkToJobBegin =	smartWarpTo(Beacon.Position + Vector3.new(0,1,0))		

								if IsNear(HMNRT.Position, Beacon.Position, 5) then
									repeat
										if not character:FindFirstChildOfClass("Tool") then
											if player.Backpack:FindFirstChild("Steak") then
												local BoxTool = player.Backpack:FindFirstChild("Steak")
												BoxTool.Parent = character
											end
										end
										task.wait(0.3)
										if ProgressBarFrame.Visible == false then
											humanoid.Jump = true
											HMNRT.CFrame = Beacon.CFrame * CFrame.new(math.random(-1,1),3,math.random(-1,1))
										end
										StuckCook = 0
										repeat
											StuckCook = StuckCook + 0.3
											task.wait(0.3)
										until BarAmount.Size.X.Scale > 0.94 or StuckCook >= 11
										pcall(function()
											firesignal(FinishBar.MouseButton1Click)
											CanCheckTool = false
										end)
									until ProgressBarFrame.Visible == false or player:GetAttribute("Job") ~= "shelf_stocker" 
										or Depositing == true or UserHurt == true
								end
							end

						until not character:FindFirstChildOfClass("Tool") or Depositing == true or UserHurt == true or player:GetAttribute("Job") ~= "steakhouse_cook" 
					end
					wait(0.1)
				until Stock_Farm == false or player:GetAttribute("Job") ~= "steakhouse_cook" 
			end
		end
		task.wait(1)
	end
end)

Tabs.Mode2:Divider()

Section = Tabs.Mode2:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("📦 ออโต้ทำงานจัดของ", "📦 Auto works to organize things"))

Stock_Farm = false
Tabs.Mode2:Toggle({
	Title = Translate("เริ่มทำงาน", "Start working"),
	Value = false,
	Callback = function(state) 
		Stock_Farm = state
		if Stock_Farm == true then
			WindUI:Notify({
				Title = "คุณได้เปิดฟังชั่น",
				Content = "ออโต้ทำงานจัดของ",
				Duration = 5,
			})
			VehicleBlockers.Parent = DoorFolder
			for i,v in ipairs(workspace:GetDescendants()) do
				if v.Name == "DoorSystem" then
					v.Parent = DoorFolder
				end
			end
		else
			UsePathFinding = false
			WindUI:Notify({
				Title = "คุณได้ปิดฟังชั่น",
				Content = "ออโต้ทำงานจัดของ",
				Duration = 5,
			})
			VehicleBlockers.Parent = Map
			for i,v in ipairs(DoorFolder:GetChildren()) do
				v.Parent = workspace
			end
			task.wait(1)
			UsePathFinding = false
		end
	end
})
task.spawn(function()
	local StuckStock = 0
	local NearPart = nil
	local NearDis = math.huge
	local TakeJobPosition = Vector3.new(159, 255, 208)
	local TakeBoxPosition = Vector3.new(133, 255, 208)
	local ShelfStockingJob = Tiles:WaitForChild("GasStationTile"):WaitForChild("Quick11"):WaitForChild("Interior"):WaitForChild("ShelfStockingJob")
	
	while true do
		if Stock_Farm then
			if player:GetAttribute("Job") ~= "shelf_stocker" then
				if Depositing == true or UserHurt == true then
					repeat
						task.wait(0.5)
					until Depositing == false and UserHurt == false
				end
				repeat
					local smartWalkToJobBegin =	smartWarpTo(JobBegin_Quick11Beacon.Position + Vector3.new(0,1,0))
					if IsNear(HMNRT.Position, JobBegin_Quick11Beacon.Position, 5) then
						if JobApplicationFrame.Visible == true then
							JobApplicationFrame.Visible = false
						end
						for _, obj in ipairs(getgc(true)) do
							if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
								CounterGetGC = obj
								break
							end
						end
						CounterGetGC.event += 1
						Send:FireServer(CounterGetGC.event,"apply_for_job",Quick11Beacon)
					end
					wait(0.1)
				until player:GetAttribute("Job") == "shelf_stocker" or Stock_Farm == false or Depositing == true or UserHurt == true
				WindUI:Notify({
					Title = "สมัครงานจัดของ",
					Content = "สำเร็จ",
					Duration = 5,
				})
			else
				repeat
					if JobApplicationFrame.Visible == true and player:GetAttribute("Job") == "shelf_stocker" then
						JobApplicationFrame.Visible = false
					end
					if Depositing == true or UserHurt == true then
						repeat
							task.wait(0.5)
						until Depositing == false and UserHurt == false
					end
					repeat
						if not character:FindFirstChildOfClass("Tool") then
							if player.Backpack:FindFirstChild("BoxTool") then
								local BoxTool = player.Backpack:FindFirstChild("BoxTool")
								BoxTool.Parent = character
							end
						end
						
						if not character:FindFirstChildOfClass("Tool") and player:GetAttribute("Job") == "shelf_stocker" then
							local smartWalkToJobBegin =	smartWarpTo(TakeBoxPosition + Vector3.new(0,1,0))					
							if IsNear(HMNRT.Position, TakeBoxPosition, 3) then
								
								if Shelf_LevelKill >= 0 then
									if ShelfStockingJob:FindFirstChild("NormalBox") and ShelfStockingJob:FindFirstChild("NormalBox"):FindFirstChildOfClass("ProximityPrompt") then
										local Prox = ShelfStockingJob:FindFirstChild("NormalBox"):FindFirstChildOfClass("ProximityPrompt")
										for i=1,15 do
											fireproximityprompt(Prox)
											wait(0.03)
										end
									end
								elseif Shelf_LevelKill >= 70 then
									if ShelfStockingJob:FindFirstChild("ElectronicsBox") and ShelfStockingJob:FindFirstChild("ElectronicsBox"):FindFirstChildOfClass("ProximityPrompt") then
										local Prox = ShelfStockingJob:FindFirstChild("ElectronicsBox"):FindFirstChildOfClass("ProximityPrompt")
										for i=1,15 do
											fireproximityprompt(Prox)
											wait(0.03)
										end
									end
									if ShelfStockingJob:FindFirstChild("NormalBox") and ShelfStockingJob:FindFirstChild("NormalBox"):FindFirstChildOfClass("ProximityPrompt") then
										local Prox = ShelfStockingJob:FindFirstChild("NormalBox"):FindFirstChildOfClass("ProximityPrompt")
										for i=1,15 do
											fireproximityprompt(Prox)
											wait(0.03)
										end
									end
								end
							end
						end
						task.wait(0.1)
					until character:FindFirstChildOfClass("Tool") and character:FindFirstChildOfClass("Tool"):GetAttribute("JobTool") 
						or player:GetAttribute("Job") ~= "shelf_stocker" or Depositing == true or UserHurt == true
					
					repeat
						
						StuckStock = 0
						repeat
							StuckStock = StuckStock + 0.3
							task.wait(0.3)
						until workspace:FindFirstChild("Beacon") and workspace:FindFirstChild("Beacon"):FindFirstChild("Base") 
							or player:GetAttribute("Job") ~= "shelf_stocker" 
							or Depositing == true or UserHurt == true or StuckStock >= 3
						
						if player:GetAttribute("Job") == "shelf_stocker" and workspace:FindFirstChild("Beacon") and workspace:FindFirstChild("Beacon"):FindFirstChild("Base") then
							local Beacon = workspace:FindFirstChild("Beacon"):FindFirstChild("Base")
							local smartWalkToJobBegin =	smartWarpTo(Beacon.Position + Vector3.new(0,1,0))		

							if IsNear(HMNRT.Position, Beacon.Position, 5) then
								repeat
									if not character:FindFirstChildOfClass("Tool") then
										if player.Backpack:FindFirstChild("BoxTool") and player.Backpack:FindFirstChild("BoxTool"):GetAttribute("JobTool") then
											local BoxTool = player.Backpack:FindFirstChild("BoxTool")
											BoxTool.Parent = character
										end
									end
									task.wait(0.3)
									if ProgressBarFrame.Visible == false then
										humanoid.Jump = true
										HMNRT.CFrame = Beacon.CFrame * CFrame.new(math.random(-1,1),3,math.random(-1,1))
									end
								until ProgressBarFrame.Visible == false or player:GetAttribute("Job") ~= "shelf_stocker" 
									or Depositing == true or UserHurt == true
							end
						end
						
					until not character:FindFirstChildOfClass("Tool") or Depositing == true or UserHurt == true
					wait(0.1)
				until Stock_Farm == false or player:GetAttribute("Job") ~= "shelf_stocker" 
			end
		end
		task.wait(1)
	end
end)

Tabs.Mode2:Divider()

Section = Tabs.Mode2:Section({ 
	Title = "Section",
	TextXAlignment = "Left",
	TextSize = 25,
})
Section:SetTitle(Translate("🧹 ออโต้ทำงานถูพื้น", "🧹 Auto floor mopping"))

NameNeedMob = {"SmallPuddle"}
Tabs.Mode2:Dropdown({
	Title = Translate("แอ่งน้ำที่อนุญาตให้ถู", "Puddles where mopping is allowed"),
	Values = {"SmallPuddle", "LargePuddle", "NastyPuddle", "OilPuddle", "ToxicPuddle"},
	Value = {"SmallPuddle", "LargePuddle", "NastyPuddle", "OilPuddle", "ToxicPuddle"},
	Multi = true,
	AllowNone = true,
	Callback = function(option) 
		NameNeedMob = option
	end
})

Mob_Farm = false
Tabs.Mode2:Toggle({
	Title = Translate("เริ่มทำงาน", "Start working"),
	Value = false,
	Callback = function(state) 
		Mob_Farm = state
		if Mob_Farm == true then
			WindUI:Notify({
				Title = "คุณได้เปิดฟังชั่น",
				Content = "ออโต้ทำงานถูพื้น",
				Duration = 5,
			})
			VehicleBlockers.Parent = DoorFolder
			for i,v in ipairs(workspace:GetDescendants()) do
				if v.Name == "DoorSystem" then
					v.Parent = DoorFolder
				end
			end
		else
			UsePathFinding = false
			WindUI:Notify({
				Title = "คุณได้ปิดฟังชั่น",
				Content = "ออโต้ทำงานถูพื้น",
				Duration = 5,
			})
			VehicleBlockers.Parent = Map
			for i,v in ipairs(DoorFolder:GetChildren()) do
				v.Parent = workspace
			end
			task.wait(1)
			UsePathFinding = false
		end
	end
})

task.spawn(function()
	local Puddles = Map:WaitForChild("Tiles"):WaitForChild("BurgerPlaceTile"):WaitForChild("BurgerPlace"):WaitForChild("Interior"):WaitForChild("Puddles")
	local StuckMob = 0
	local NearPart = nil
	local NearDis = math.huge
	local HardWarePosition = Vector3.new(-136.406662, 254.851074, 153.555588)
	
	while true do
		if Mob_Farm then
			if player:GetAttribute("Job") ~= "janitor" then
				if Depositing == true or UserHurt == true then
					repeat
						task.wait(0.5)
					until Depositing == false and UserHurt == false
				end
				repeat
					local smartWalkToJobBegin =	smartWarpTo(JobBegin_BurgePlaceBeacon.Position + Vector3.new(0,1,0))					
					if IsNear(HMNRT.Position, JobBegin_BurgePlaceBeacon.Position, 5) then
						if JobApplicationFrame.Visible == true then
							JobApplicationFrame.Visible = false
						end
						for _, obj in ipairs(getgc(true)) do
							if type(obj) == "table" and rawget(obj, "event") and rawget(obj, "func") then
								CounterGetGC = obj
								break
							end
						end
						CounterGetGC.event += 1
						Send:FireServer(CounterGetGC.event,"apply_for_job",workspace:WaitForChild("BurgePlaceBeacon"))
					end
					wait(0.1)
				until player:GetAttribute("Job") == "janitor" or Mob_Farm == false 
					or Depositing == true or UserHurt == true
				WindUI:Notify({
					Title = "สมัครงานถูพื้น",
					Content = "สำเร็จ",
					Duration = 5,
				})
			else
				repeat
					if JobApplicationFrame.Visible == true and player:GetAttribute("Job") == "janitor" then
						JobApplicationFrame.Visible = false
					end
					if Depositing == true or UserHurt == true then
						repeat
							task.wait(0.5)
						until Depositing == false and UserHurt == false
					end
					if not character:FindFirstChild("Mop") then
						if player.Backpack:FindFirstChild("Mop") then
							player.Backpack.Mop.Parent = character
						end
					end
					
					NearPart = nil
					NearDis = math.huge
					
					for i,v in ipairs(Puddles:GetChildren()) do
						if v.Size.X > 4 and matchesAllowedKeyword(v.Name, NameNeedMob) then
							
							----*Bronze Mop / lvl.10
							----*Silver Mop / lvl.25
							----*Golden Mop / lvl.40
							----*Diamon Mop / lvl.55
							
							----***LargePuddle / lvl.10
							----***NastyPuddle / lvl.20
							----***OilPuddle / lvl.35
							----***ToxicPuddle / lvl.50
							
							if UserSkill_Janitor < 10 and v.Name == "LargePuddle" then return end
							if UserSkill_Janitor < 20 and v.Name == "NastyPuddle" then return end
							if UserSkill_Janitor < 35 and v.Name == "OilPuddle" then return end
							if UserSkill_Janitor < 50 and v.Name == "ToxicPuddle" then return end
							
							local dis = (HMNRT.Position - v.Position).Magnitude
							if dis < NearDis then
								NearDis = dis
								NearPart = v
							end
						end
					end
					
					if NearPart then
						local smartWalkToPuddles = smartWarpTo(NearPart.Position + Vector3.new(0,2,0))
						repeat
							StuckMob = StuckMob + 0.3
							task.wait(0.3)
							if ProgressBarFrame.Visible == false then
								StuckMob = StuckMob + 5
							end
						until NearPart.Size.X < 0.002 or StuckMob >= 15 
							or Depositing == true or Mob_Farm == false or player:GetAttribute("Job") ~= "janitor" or UserHurt == true
						UsePathFinding = false
						StuckMob = 0
						NearPart.Parent = SomtankInfo_Puddles
						if NearPart.Size.X < 0.002 then
							WindUI:Notify({
								Title = "ถูพื้น",
								Content = "สำเร็จ",
								Duration = 5,
							})
						end
						task.wait(0.1)
						if #SomtankInfo_Puddles:GetChildren() > 5 then
							for _, item in ipairs(SomtankInfo_Puddles:GetChildren()) do
								if item.Size.X > 4 then
									item.Parent = Puddles
								end
							end
						end
					end
					task.wait(0.1)
				until Mob_Farm == false or player:GetAttribute("Job") ~= "janitor" or UserHurt == true
			end
		end
		task.wait(1)
	end
end)

Tabs.Mode2:Divider()

-- Configuration / Optional

local HttpService = game:GetService("HttpService")

local folderPath = "WindUI"
makefolder(folderPath)

local function SaveFile(fileName, data)
	local filePath = folderPath .. "/" .. fileName .. ".json"
	local jsonData = HttpService:JSONEncode(data)
	writefile(filePath, jsonData)
end
local function LoadFile(fileName)
	local filePath = folderPath .. "/" .. fileName .. ".json"
	if isfile(filePath) then
		local jsonData = readfile(filePath)
		return HttpService:JSONDecode(jsonData)
	end
end
local function ListFiles()
	local files = {}
	for _, file in ipairs(listfiles(folderPath)) do
		local fileName = file:match("([^/]+)%.json$")
		if fileName then
			table.insert(files, fileName)
		end
	end
	return files
end
local themeValues = {}
for name, _ in pairs(WindUI:GetThemes()) do
	table.insert(themeValues, name)
end
local filesDropdown
local files = ListFiles()
local currentThemeName = WindUI:GetCurrentTheme()
local themes = WindUI:GetThemes()
local ThemeAccent = themes[currentThemeName].Accent
local ThemeOutline = themes[currentThemeName].Outline
local ThemeText = themes[currentThemeName].Text
local ThemePlaceholderText = themes[currentThemeName].Placeholder
function updateTheme()
	WindUI:AddTheme({
		Name = currentThemeName,
		Accent = ThemeAccent,
		Outline = ThemeOutline,
		Text = ThemeText,
		Placeholder = ThemePlaceholderText
	})
	WindUI:SetTheme(currentThemeName)
end
local InviteCode = "ApbHXtAwU2"
local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"
local Response = game:GetService("HttpService"):JSONDecode(WindUI.Creator.Request({
	Url = DiscordAPI,
	Method = "GET",
	Headers = {
		["User-Agent"] = "RobloxBot/1.0",
		["Accept"] = "application/json"
	}
}).Body)
Tabs.Mode2:Keybind({
	Title = "ปุ่มเปิดปิดหน้าต่าง",
	Desc = "สามารถเซ้ทได้",
	Value = "Insert",
	Callback = function(v)
		Window:SetToggleKey(Enum.KeyCode[v])
	end
})
local function parseJSON(luau_table, indent, level, visited)
	indent = indent or 2
	level = level or 0
	visited = visited or {}

	local currentIndent = string.rep(" ", level * indent)
	local nextIndent = string.rep(" ", (level + 1) * indent)

	if luau_table == nil then
		return "null"
	end

	local dataType = type(luau_table)

	if dataType == "table" then
		if visited[luau_table] then
			return "\"[Circular Reference]\""
		end

		visited[luau_table] = true

		local isArray = true
		local maxIndex = 0

		for k, _ in pairs(luau_table) do
			if type(k) == "number" and k > maxIndex then
				maxIndex = k
			end
			if type(k) ~= "number" or k <= 0 or math.floor(k) ~= k then
				isArray = false
				break
			end
		end

		local count = 0
		for _ in pairs(luau_table) do
			count = count + 1
		end
		if count ~= maxIndex and isArray then
			isArray = false
		end

		if count == 0 then
			return "{}"
		end

		if isArray then
			if count == 0 then
				return "[]"
			end

			local result = "[\n"

			for i = 1, maxIndex do
				result = result .. nextIndent .. parseJSON(luau_table[i], indent, level + 1, visited)
				if i < maxIndex then
					result = result .. ","
				end
				result = result .. "\n"
			end

			result = result .. currentIndent .. "]"
			return result
		else
			local result = "{\n"
			local first = true

			local keys = {}
			for k in pairs(luau_table) do
				table.insert(keys, k)
			end
			table.sort(keys, function(a, b)
				if type(a) == type(b) then
					return tostring(a) < tostring(b)
				else
					return type(a) < type(b)
				end
			end)

			for _, k in ipairs(keys) do
				local v = luau_table[k]
				if not first then
					result = result .. ",\n"
				else
					first = false
				end

				if type(k) == "string" then
					result = result .. nextIndent .. "\"" .. k .. "\": "
				else
					result = result .. nextIndent .. "\"" .. tostring(k) .. "\": "
				end

				result = result .. parseJSON(v, indent, level + 1, visited)
			end

			result = result .. "\n" .. currentIndent .. "}"
			return result
		end
	elseif dataType == "string" then
		local escaped = luau_table:gsub("\\", "\\\\")
		escaped = escaped:gsub("\"", "\\\"")
		escaped = escaped:gsub("\n", "\\n")
		escaped = escaped:gsub("\r", "\\r")
		escaped = escaped:gsub("\t", "\\t")

		return "\"" .. escaped .. "\""
	elseif dataType == "number" then
		return tostring(luau_table)
	elseif dataType == "boolean" then
		return luau_table and "true" or "false"
	elseif dataType == "function" then
		return "\"function\""
	else
		return "\"" .. dataType .. "\""
	end
end

local function tableToClipboard(luau_table, indent)
	indent = indent or 4
	local jsonString = parseJSON(luau_table, indent)
	setclipboard(jsonString)
	return jsonString
end

local ConfigManager = Window.ConfigManager

local myConfig = ConfigManager:CreateConfig("myConfig")

myConfig:Register( "toggleNameExample",          ToggleElement      )
myConfig:Register( "sliderNameExample",          SliderElement      ) 
myConfig:Register( "keybindNameExample",         KeybindElement     )
myConfig:Register( "dropdownNameExample",        DropdownElement    )
myConfig:Register( "inputNameExample",           InputElement       )
myConfig:Register( "ColorpickerNameExample",     ColorpickerElement )

Window:OnClose(function()
	UiIs_Close = false
end)
